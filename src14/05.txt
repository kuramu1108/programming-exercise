線形走査法とチェイン法の中で
個人的にはチェイン法が好きです。
なぜなら、チェイン法においで衝突が発生する場合、
データの格納位置は予想できますが、
線形走査法の場合は状況によって結構ランダムになるので
そういう不確定性があまり好ましくないです。

HASH：
利点：一定時間の挿入、削除と検索が可能
欠点：ハッシュ関数の設計、大きめのメモリ確保が必要

例えにすると
図書館は一番相応しいではないでしょうか
データー＞本
格納する配列ー＞棚
ハッシュ値ー＞請求記号
ハッシュ関数ー＞本のタイトル、ジャンル、分野によって請求記号が決まる

新しい本を追加する時、その本のジャンルや分野などによって
請求記号を与えて、その記号を格納する棚に置くことになっています。
（Insert）

本を探す時、検索エンジンで本の請求記号を知り、直接それに応じる棚に行けば
本が見つかるはず。
（Search）

それに、雑誌などの同じタイトルが持っている本は同じ請求記号を持っており、
（衝突の場合）
そういう本は同じ場所で並べて格納することになっています
（どちらか言うとチェイン法に近いかもしれない）

しかし、いつでも新しい本を追加できるように、図書館の必要空間は
非常に大きいであり（配列のメモリ空間）
本の種類と数が増える同時に、
請求記号の作り方もしっかり設計しなければならない。
（ハッシュ関数のデザイン）

以上です。
